%YAML 1.2
---
name: Crontab
scope: source.crontab
version: 2

file_extensions:
  - tab
  - crontab
  - cron.d

contexts:
  main:
    - include: comments
    - include: variables
    - include: at-syntax
    - include: cron-syntax
    # Don't `invalid.illegal` in-process completions
    - match: '{{snippet_typing}}'
    - match: ^\s*\w+
      scope: invalid.illegal.crontab

###[ CRON EXPRESSIONS ]########################################################

  cron-syntax:
    - match: ^\s*(?=[*\d/,-]+)
      set: cron-minute

  cron-initial-comma:
    - match: \,
      scope: invalid.illegal.crontab

  cron-common:
    - match: \*
      scope: variable.language.wildcard.crontab
    - match: /(?=\d)
      scope: punctuation.separator.step.crontab
    - match: \,
      scope: punctuation.separator.sequence.crontab
    - match: \bH\b
      scope: invalid.deprecated.non-standard.crontab

  cron-minute:
    - meta_content_scope:
        meta.string.cron-expression.crontab
        meta.sequence.cron.minute.crontab
    - include: pop-nl
    - include: illegal-punctuation
    - include: cron-common
    - match: \b{{minute}}(-){{minute}}\b
      scope: constant.other.range.crontab
      captures:
        1: punctuation.separator.sequence.crontab
    - match: \b{{minute}}\b
      scope: constant.numeric.integer.decimal.crontab
    - match: (?=[ \t])
      set: cron-hour-is-next
    - include: illegal-non-whitespace

  cron-hour-is-next:
    - meta_content_scope: meta.string.cron-expression.crontab
    - include: pop-nl
    - include: cron-initial-comma
    - match: (?=\S)
      set: cron-hour

  cron-hour:
    - meta_content_scope:
        meta.string.cron-expression.crontab
        meta.sequence.cron.hour.crontab
    - include: pop-nl
    - include: illegal-punctuation
    - include: cron-common
    - match: \b{{hour}}(-){{hour}}\b
      scope: constant.other.range.crontab
      captures:
        1: punctuation.separator.sequence.crontab
    - match: \b{{hour}}\b
      scope: constant.numeric.integer.decimal.crontab
    - match: (?=[ \t])
      set: cron-day-of-month-is-next
    - include: illegal-non-whitespace

  cron-day-of-month-is-next:
    - meta_content_scope: meta.string.cron-expression.crontab
    - include: pop-nl
    - include: cron-initial-comma
    - match: (?=\S)
      set: cron-day-of-month

  cron-day-of-month:
    - meta_content_scope:
        meta.string.cron-expression.crontab
        meta.sequence.cron.day-of-month.crontab
    - include: pop-nl
    - include: illegal-punctuation
    - include: cron-common
    - match: \b{{day_of_month}}(-){{day_of_month}}\b
      scope: constant.other.range.crontab
      captures:
        1: punctuation.separator.sequence.crontab
    - match: \b({{day_of_month}})([LW])?\b
      captures:
        1: constant.numeric.integer.decimal.crontab
        2: invalid.deprecated.non-standard.crontab
    - match: \?
      scope: invalid.deprecated.non-standard.crontab
    - match: (?=[ \t])
      set: cron-month-is-next
    - include: illegal-non-whitespace

  cron-month-is-next:
    - meta_content_scope: meta.string.cron-expression.crontab
    - include: pop-nl
    - include: cron-initial-comma
    - match: (?=\S)
      set: cron-month

  cron-month:
    - meta_content_scope:
        meta.string.cron-expression.crontab
        meta.sequence.cron.month.crontab
    - include: pop-nl
    - include: illegal-punctuation
    - include: cron-common
    - match: \b{{month}}(-){{month}}\b
      scope: constant.other.range.crontab
      captures:
        1: punctuation.separator.sequence.crontab
    - match: \b{{month}}\b
      scope: constant.numeric.integer.decimal.crontab
    - match: \b({{words_month}})(-)({{words_month}})\b
      scope: constant.other.range.crontab
      captures:
        1: support.constant.month-name.crontab
        2: punctuation.separator.sequence.crontab
        3: support.constant.month-name.crontab
    - match: \b{{words_month}}\b
      scope: support.constant.month-name.crontab
    - match: (?=[ \t])
      set: cron-day-of-week-is-next
    - include: illegal-non-alpha

  cron-day-of-week-is-next:
    - meta_content_scope: meta.string.cron-expression.crontab
    - include: pop-nl
    - include: cron-initial-comma
    - match: (?=\S)
      set: cron-day-of-week

  cron-day-of-week:
    - meta_content_scope:
        meta.string.cron-expression.crontab
        meta.sequence.cron.day-of-week.crontab
    - include: pop-nl
    - include: illegal-punctuation
    - include: cron-common
    - match: \b{{day_of_week}}(-){{day_of_week}}\b
      scope: constant.other.range.crontab
      captures:
        1: punctuation.separator.sequence.crontab
    - match: \b({{day_of_week}})(L)?\b
      captures:
        1: constant.numeric.integer.decimal.crontab
        2: invalid.deprecated.non-standard.crontab
    - match: \b({{words_day_of_week}})(-)({{words_day_of_week}})\b
      scope: constant.other.range.crontab
      captures:
        1: support.constant.day-of-week-name.crontab
        2: punctuation.separator.sequence.crontab
        3: support.constant.day-of-week-name.crontab
    - match: \b{{words_day_of_week}}\b
      scope: support.constant.day-of-week-name.crontab
    - match: \?|#
      scope: invalid.deprecated.non-standard.crontab
    - match: (?=[ \t])
      set: command-is-next
    - include: illegal-non-alpha

  command-is-next:
    - include: pop-nl
    - match: \s+
      embed: scope:source.shell.bash.crontab
      escape: (?=$|(?<!\\)%)
    - match: (?=%)
      set: command-stdin

  command-stdin:
    - meta_content_scope: meta.string.stdin.crontab string.unquoted.crontab
    - include: pop-nl
    - match: \\%
      scope: constant.character.escape.crontab
    - match: '%'
      scope: constant.character.newline.crontab

  at-syntax:
    # Keyword, then script embed
    - match: ^\s*((@){{keywords}})[ \t]+
      captures:
        1: constant.language.schedule.crontab
        2: punctuation.definition.variable.crontab
      embed: scope:source.shell.bash.crontab
      escape: (?=$)
    # Don't unhighlight keywords just because EOL
    - match: ^\s*((@){{keywords}})\b
      captures:
        1: constant.language.schedule.crontab
        2: punctuation.definition.variable.crontab
    # Set up autocomplete for keywords
    - match: ^\s*(@)(\w*(?:[\n\s]|$))
      captures:
        1: punctuation.definition.variable.crontab
        2: meta.completion.at.crontab

###[ ENVIRONMENT VARIABLES ]###################################################

  variables:
    - match: ^([a-zA-Z0-9_]+)\s*(=)
      captures:
        1: variable.other.readwrite.crontab
        2: keyword.operator.assignment.crontab
      push: variable-value

  variable-value:
    - include: pop-nl
    - match: '"'
      scope: punctuation.definition.string.begin.crontab
      set: string-body-double
    - match: "'"
      scope: punctuation.definition.string.begin.crontab
      set: string-body-single
    - match: \S
      push: string-body-unquoted

  string-body-double:
    - meta_scope: meta.string.crontab string.quoted.double.crontab
    - match: '"'
      scope: punctuation.definition.string.end.crontab
      pop: 1

  string-body-single:
    - meta_scope: meta.string.crontab string.quoted.single.crontab
    - match: "'"
      scope: punctuation.definition.string.end.crontab
      pop: 1

  string-body-unquoted:
    - meta_scope: meta.string.crontab string.unquoted.crontab
    - match: (?=\s*$)
      pop: 1

###[ MISCELLANEOUS ]###########################################################

  comments:
    - match: ^\s*(?=#)
      push: comment

  comment:
    - match: '#'
      scope: punctuation.definition.comment.crontab
      push:
        - meta_scope: comment.line.number-sign.crontab
        - include: pop-nl
    - include: pop-nl

  illegal-punctuation:
    - match: \*{2,}|[/,?-]{2,}|,(?=[ \t])
      scope: invalid.illegal.crontab

  illegal-non-alpha:
    - match: (?i:[^a-z\s]+)
      scope: invalid.illegal.crontab

  illegal-non-whitespace:
    - match: \S+
      scope: invalid.illegal.crontab

###[ PROTOTYPE ]###############################################################

  pop-nl:
    - match: $\n?
      pop: 1

###############################################################################

variables:
  minute:       (?:[1-5]?\d)            # 0-59
  hour:         (?:1?\d|2[0-3])         # 0-23
  day_of_month: (?:[1-9]|[1-2]\d|3[01]) # 1-31
  month:        (?:[1-9]|1[0-2])        # 1-12
  day_of_week:  (?:[0-7])               # 0-7
  words_month:  (?i:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)
  words_day_of_week: (?i:Sun|Mon|Tue|Wed|Thu|Fri|Sat)
  keywords: (?:reboot|yearly|annually|monthly|weekly|daily|midnight|hourly)
  snippet_typing:  |-
    (?x:
      c(?:r(?:o(?:n)?)?)?
    | r(?:e(?:b(?:o(?:o(?:t)?)?)?)?)?
    | y(?:e(?:a(?:r(?:l(?:y)?)?)?)?)?
    | a(?:n(?:n(?:u(?:a(?:l(?:l(?:y)?)?)?)?)?)?)?
    | m(?:o(?:n(?:t(?:h(?:l(?:y)?)?)?)?)?)?
    | w(?:e(?:e(?:k(?:l(?:y)?)?)?)?)?
    | d(?:a(?:i(?:l(?:y)?)?)?)?
    | m(?:i(?:d(?:n(?:i(?:g(?:h(?:t)?)?)?)?)?)?)?
    | h(?:o(?:u(?:r(?:l(?:y)?)?)?)?)?
    )
